
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AirlineScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  country: 'country',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AirportScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  city: 'city',
  country: 'country',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FlightScalarFieldEnum = {
  id: 'id',
  flightNumber: 'flightNumber',
  airlineId: 'airlineId',
  departureId: 'departureId',
  arrivalId: 'arrivalId',
  departureTime: 'departureTime',
  arrivalTime: 'arrivalTime',
  duration: 'duration',
  stops: 'stops',
  aircraft: 'aircraft',
  businessPrice: 'businessPrice',
  economyPrice: 'economyPrice',
  currency: 'currency',
  availableSeats: 'availableSeats',
  baggageIncluded: 'baggageIncluded',
  isActive: 'isActive',
  source: 'source',
  externalId: 'externalId',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  isOffer: 'isOffer',
  originalPrice: 'originalPrice',
  discountPercent: 'discountPercent',
  offerValidUntil: 'offerValidUntil',
  bookingUrl: 'bookingUrl',
  deepLinkUrl: 'deepLinkUrl',
  flexibleDates: 'flexibleDates',
  dateRange: 'dateRange',
  offerSource: 'offerSource',
  lastPriceCheck: 'lastPriceCheck',
  priceChangeAlert: 'priceChangeAlert'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  flightId: 'flightId',
  businessPrice: 'businessPrice',
  economyPrice: 'economyPrice',
  currency: 'currency',
  timestamp: 'timestamp'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  departureCode: 'departureCode',
  arrivalCode: 'arrivalCode',
  departureDate: 'departureDate',
  returnDate: 'returnDate',
  maxPrice: 'maxPrice',
  minPrice: 'minPrice',
  currency: 'currency',
  classType: 'classType',
  maxStops: 'maxStops',
  preferredAirlines: 'preferredAirlines',
  isActive: 'isActive',
  emailNotification: 'emailNotification',
  pushNotification: 'pushNotification',
  lastTriggered: 'lastTriggered',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  alertId: 'alertId',
  title: 'title',
  message: 'message',
  type: 'type',
  status: 'status',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.SearchScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  departureCode: 'departureCode',
  arrivalCode: 'arrivalCode',
  departureDate: 'departureDate',
  returnDate: 'returnDate',
  passengers: 'passengers',
  classType: 'classType',
  resultsCount: 'resultsCount',
  createdAt: 'createdAt'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  flightId: 'flightId',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.SpecialOfferScalarFieldEnum = {
  id: 'id',
  flightId: 'flightId',
  title: 'title',
  description: 'description',
  discountPercent: 'discountPercent',
  originalPrice: 'originalPrice',
  offerPrice: 'offerPrice',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  maxBookings: 'maxBookings',
  currentBookings: 'currentBookings',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.PriceAlertScalarFieldEnum = {
  id: 'id',
  route: 'route',
  targetPrice: 'targetPrice',
  currentPrice: 'currentPrice',
  priceDropPercent: 'priceDropPercent',
  isTriggered: 'isTriggered',
  lastCheck: 'lastCheck',
  createdAt: 'createdAt'
};

exports.Prisma.PopularRouteScalarFieldEnum = {
  id: 'id',
  origin: 'origin',
  destination: 'destination',
  searchCount: 'searchCount',
  avgPrice: 'avgPrice',
  lastSearched: 'lastSearched',
  createdAt: 'createdAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Airline: 'Airline',
  Airport: 'Airport',
  Flight: 'Flight',
  PriceHistory: 'PriceHistory',
  Alert: 'Alert',
  Notification: 'Notification',
  Search: 'Search',
  Favorite: 'Favorite',
  SpecialOffer: 'SpecialOffer',
  PriceAlert: 'PriceAlert',
  PopularRoute: 'PopularRoute',
  SystemConfig: 'SystemConfig'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
